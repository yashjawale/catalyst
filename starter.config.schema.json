{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Fabr Starter Configuration",
  "description": "Configuration file for Fabr project templates",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string",
      "description": "JSON Schema reference"
    },
    "name": {
      "type": "string",
      "description": "The name of the template configuration"
    },
    "description": {
      "type": "string",
      "description": "A brief description of what this template creates"
    },
    "version": {
      "type": "string",
      "description": "Version of the template configuration",
      "pattern": "^\\d+\\.\\d+\\.\\d+$"
    },
    "preSetupCommand": {
      "type": "string",
      "description": "Command to run before any setup tasks (e.g., 'echo \"Starting setup...\"')"
    },
    "postSetupCommand": {
      "type": "string",
      "description": "Command to run after placeholder replacement (e.g., 'chmod +x scripts/*')"
    },
    "installCommand": {
      "type": "string",
      "description": "Command to install dependencies (e.g., 'npm install', 'yarn install', 'composer install')",
      "default": "npm install"
    },
    "postInstallCommand": {
      "type": "string",
      "description": "Command to run after dependency installation (e.g., 'npm run build', 'git init')"
    },
    "placeholders": {
      "type": "array",
      "description": "Array of placeholder configurations for template customization",
      "items": {
        "$ref": "#/definitions/placeholder"
      }
    },
    "files": {
      "type": "object",
      "description": "File-specific configurations",
      "properties": {
        "ignore": {
          "type": "array",
          "description": "Array of file patterns to ignore during placeholder replacement",
          "items": {
            "type": "string"
          },
          "examples": [
            ["node_modules/**", "*.jpg", "*.png", "*.gif", "*.svg"]
          ]
        },
        "include": {
          "type": "array",
          "description": "Array of file patterns to specifically include for placeholder replacement",
          "items": {
            "type": "string"
          },
          "examples": [
            ["**/*.js", "**/*.ts", "**/*.json", "**/*.md"]
          ]
        }
      }
    },
    "gitInit": {
      "type": "boolean",
      "description": "Whether to initialize a git repository after setup",
      "default": false
    },
    "removeFiles": {
      "type": "array",
      "description": "Array of file patterns to remove after setup completion",
      "items": {
        "type": "string"
      },
      "examples": [
        ["starter.config.json", "README.template.md"]
      ]
    }
  },
  "definitions": {
    "placeholder": {
      "type": "object",
      "description": "Configuration for a single placeholder",
      "properties": {
        "key": {
          "type": "string",
          "description": "The placeholder key (e.g., 'PROJECT_NAME', 'AUTHOR_NAME')",
          "pattern": "^[A-Z_][A-Z0-9_]*$"
        },
        "prompt": {
          "type": "string",
          "description": "The message to show when prompting for this value"
        },
        "description": {
          "type": "string",
          "description": "Additional description or help text for this placeholder"
        },
        "default": {
          "type": "string",
          "description": "Default value for this placeholder"
        },
        "required": {
          "type": "boolean",
          "description": "Whether this placeholder is required",
          "default": true
        },
        "transform": {
          "type": "object",
          "description": "Transform this placeholder's value from another placeholder",
          "properties": {
            "source": {
              "type": "string",
              "description": "The source placeholder key to transform from"
            },
            "case": {
              "type": "string",
              "enum": ["kebab", "pascal", "camel", "snake", "constant"],
              "description": "The case transformation to apply"
            }
          },
          "required": ["source", "case"],
          "additionalProperties": false
        },
        "defaultCase": {
          "type": "object",
          "description": "Generate a default value by transforming another placeholder",
          "properties": {
            "source": {
              "type": "string",
              "description": "The source placeholder key to transform from"
            },
            "case": {
              "type": "string",
              "enum": ["kebab", "pascal", "camel", "snake", "constant"],
              "description": "The case transformation to apply"
            },
            "template": {
              "type": "string",
              "description": "Template string where {value} will be replaced with the transformed value"
            }
          },
          "required": ["source", "case"],
          "additionalProperties": false
        },
        "validate": {
          "type": "object",
          "description": "Validation rules for this placeholder",
          "properties": {
            "pattern": {
              "type": "string",
              "description": "Regular expression pattern that the value must match"
            },
            "minLength": {
              "type": "integer",
              "description": "Minimum length of the value",
              "minimum": 0
            },
            "maxLength": {
              "type": "integer",
              "description": "Maximum length of the value",
              "minimum": 1
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["key"],
      "oneOf": [
        {
          "required": ["prompt"]
        },
        {
          "required": ["transform"]
        }
      ],
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "name": "React TypeScript Template",
      "description": "A modern React application with TypeScript and Vite",
      "version": "1.0.0",
      "preSetupCommand": "echo 'Setting up React TypeScript project...'",
      "installCommand": "npm install",
      "postInstallCommand": "npm run build && git init",
      "gitInit": true,
      "placeholders": [
        {
          "key": "PROJECT_NAME",
          "prompt": "What is your project name?",
          "description": "This will be used as the package name and folder name",
          "validate": {
            "pattern": "^[a-z][a-z0-9-]*$",
            "minLength": 3,
            "maxLength": 50
          }
        },
        {
          "key": "PROJECT_TITLE",
          "prompt": "What is the display title for your project?",
          "description": "This will be shown in the app header and README"
        },
        {
          "key": "AUTHOR_NAME",
          "prompt": "What is your name?",
          "description": "This will be used in package.json and license"
        },
        {
          "key": "PROJECT_NAME_PASCAL",
          "transform": {
            "source": "PROJECT_NAME",
            "case": "pascal"
          }
        },
        {
          "key": "COMPONENT_NAME",
          "defaultCase": {
            "source": "PROJECT_NAME",
            "case": "pascal",
            "template": "{value}App"
          },
          "prompt": "What should the main component be called?"
        }
      ],
      "files": {
        "ignore": [
          "node_modules/**",
          "dist/**",
          "*.jpg",
          "*.png",
          "*.gif",
          "*.svg"
        ],
        "include": [
          "**/*.js",
          "**/*.ts",
          "**/*.tsx",
          "**/*.json",
          "**/*.md",
          "**/*.html"
        ]
      },
      "removeFiles": [
        "starter.config.json"
      ]
    }
  ]
}
